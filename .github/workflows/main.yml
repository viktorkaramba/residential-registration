name: CI

on:
  push:
    branches:
      - main
      - '!feature/frontend'
  pull_request:
    branches:
      - main
      - '!feature/frontend'

env:
  IMAGE_NAME: "viktorsvynar/residential-registration-api:latest"
  CONTAINER_NAME: "residential-registration-api-prod"

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main
        uses: actions/checkout@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: backend/
          push: true
          tags: viktorsvynar/residential-registration-api:latest

  deploy:
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' || github.event_name == 'pull_request')
    needs: build_and_push
    steps:
      - name: Deploy to Azure VM
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSHKEY }}
          envs: IMAGE_NAME,ENV_FILE_PATH,CONTAINER_NAME
          script: |
            # Login into DockerHub
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
    
            export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            export POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}
            export POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
            export SIGNINKEY=${{ secrets.SIGNINKEY }}
            export SALT=${{ secrets.SALT }}
            # Stop running container
            docker stop $(echo $CONTAINER_NAME)
      
            # Remove old container
            docker rm $(echo $CONTAINER_NAME)
      
            # Run a new container from a new image
            docker run -e POSTGRES_PASSWORD -e POSTGRES_HOST -e POSTGRES_PORT -e SIGNINKEY -e SALT -d \
            --restart always \
            --publish 80:8080 \
            --name $(echo $CONTAINER_NAME) \
            $(echo $IMAGE_NAME)